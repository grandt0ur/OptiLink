/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AutoIndexPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var AutoIndexPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.timeoutId = null;
  }
  async onload() {
    console.log("Loading Auto Index Plugin");
    try {
      this.registerEvent(
        this.app.workspace.on("editor-change", (editor) => {
          const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
          if (!view)
            return;
          if (this.timeoutId) {
            clearTimeout(this.timeoutId);
          }
          this.timeoutId = setTimeout(async () => {
            const activeFile = this.app.workspace.getActiveFile();
            if (activeFile) {
              const metadata = this.app.metadataCache.getFileCache(activeFile);
              if (metadata == null ? void 0 : metadata.tags) {
                await this.handleFileChange(activeFile);
              }
            }
          }, 2e3);
        })
      );
      this.registerEvent(
        this.app.vault.on("create", async (file) => {
          if (file instanceof import_obsidian.TFile && file.extension === "md") {
            await this.handleFileChange(file);
          }
        })
      );
    } catch (error) {
      console.error("Error loading Auto Index Plugin:", error);
    }
  }
  async handleFileChange(file) {
    const metadata = this.app.metadataCache.getFileCache(file);
    const existingParents = await this.findExistingParentNotes(file);
    for (const parentPath of existingParents) {
      const parentFile = this.app.vault.getAbstractFileByPath(parentPath);
      if (parentFile instanceof import_obsidian.TFile) {
        await this.removeFromParentNote(parentFile, file);
      }
    }
    if (!(metadata == null ? void 0 : metadata.tags))
      return;
    const currentParentTags = metadata.tags.map((tag) => `${tag.tag.replace("#", "")}.md`);
    for (const parentPath of currentParentTags) {
      let parentFile = this.app.vault.getAbstractFileByPath(parentPath);
      if (!(parentFile instanceof import_obsidian.TFile)) {
        parentFile = await this.createParentNote(parentPath);
        if (!(parentFile instanceof import_obsidian.TFile))
          continue;
      }
      await this.updateParentNote(parentFile, file);
    }
  }
  async createParentNote(parentPath) {
    return await this.app.vault.create(parentPath, "");
  }
  async updateParentNote(parentFile, childFile) {
    const parentContent = await this.app.vault.read(parentFile);
    const childLink = `- [[${childFile.basename}]]`;
    if (parentContent.includes(childLink))
      return;
    const existingLinks = parentContent.split("\n").filter((line) => line.trim().startsWith("- [[")).concat([childLink]).sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));
    const newContent = existingLinks.join("\n");
    await this.app.vault.modify(parentFile, newContent);
  }
  async removeFromParentNote(parentFile, childFile) {
    const parentContent = await this.app.vault.read(parentFile);
    const childLink = `- [[${childFile.basename}]]`;
    const lines = parentContent.split("\n");
    const newLines = lines.filter((line) => line.trim() !== childLink);
    const newContent = newLines.join("\n").trim();
    if (parentContent !== newContent) {
      await this.app.vault.modify(parentFile, newContent);
    }
  }
  async findExistingParentNotes(file) {
    const parents = [];
    const files = this.app.vault.getMarkdownFiles();
    for (const potentialParent of files) {
      const content = await this.app.vault.read(potentialParent);
      if (content.includes(`[[${file.basename}]]`)) {
        parents.push(potentialParent.path);
      }
    }
    return parents;
  }
};
